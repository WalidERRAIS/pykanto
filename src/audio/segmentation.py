
# To split files:
# https://stackoverflow.com/questions/51060460/split-wav-file-in-python-with-different-start-and-end-duration
# https://stackoverflow.com/questions/55669405/how-would-i-be-able-to-split-an-audio-file-into-multiple-wav-files-using-timpooi
# https://unix.stackexchange.com/questions/420820/split-audio-into-several-pieces-based-on-timestamps-from-a-text-file-with-sox-or

# Split on silence:
# https://stackoverflow.com/questions/23730796/using-pydub-to-chop-up-a-long-audio-file


# Read and parse annotations (manual segmentation, labels, etc)


# Parse .data file generated by AviaNZ-2.1 -- which contains segment timestamps and other fuckery


import numpy as np
import wavio
import os
import json
import wave
import sys
from tqdm.auto import tqdm
import pathlib2
from pathlib2 import Path
from src.read.paths import safe_makedir


def segment_bouts(wavfile, destination, subset=None):    
    """Saves segmented bouts (from AviaNZ) to individual .wav files

    Args:

        wavfile (PosixPath): Path to file
        destination (PosixPath): Destination folder. /year/individual is added.
        subset (str, optional): Subset to save, e.g "GREAT-TIT" only. Defaults to None.
    """
    wavfile_str = str(wavfile)
    datfile = wavfile_str + '.data'

    if Path(datfile).is_file():

        wavobj = wavio.read(str(wavfile))
        sampleRate = wavobj.rate
        data = wavobj.data

        f = open(datfile)
        segments = json.load(f)[1:]  # Remove header
        cnt = 1

        tmpdir = Path(destination / wavfile.parts[-3] / wavfile.parts[-2])
        safe_makedir(tmpdir)  # create output directory

        for seg in tqdm(segments, desc="{Reading and saving segments}",
                        position=0, leave=True):

            if not subset:
                filename = tmpdir / (str(wavfile.parts[-2]
                                         + '-'
                                         + str(seg[4][0]['species'])
                                         + '-'
                                         + wavfile.with_suffix('').parts[-1]
                                         + '-'
                                         + str(cnt) + '.wav'))
                cnt += 1
                s = int(seg[0] * sampleRate)
                e = int(seg[1] * sampleRate)
                temp = data[s:e]
                wavio.write(str(filename), temp.astype('int16'),
                            sampleRate, scale='dtype-limits', sampwidth=2)

            elif subset == seg[4][0]['species']:  # select songs with this label
                filename = tmpdir / (str(wavfile.parts[-2]
                                         + '-'
                                         + str(seg[4][0]['species'])
                                         + '-'
                                         + wavfile.with_suffix('').parts[-1]
                                         + '-'
                                         + str(cnt) + '.wav'))
                cnt += 1
                s = int((seg[0]-1) * sampleRate)
                e = int((seg[1]+1) * sampleRate)
                temp = data[s:e]
                wavio.write(str(filename), temp.astype('int16'),
                            sampleRate, scale='dtype-limits', sampwidth=2)

    else:
        print("""No .data file exists for this .wav 
        There might be files with no segmentation information or
        you might have included an unwanted directory""")


def batch_segment_bouts(origin, destination, subset=None):
    """Extracts all sound segments found in a folder/subfolders.

    Based on code by Stephen Marsland, Nirosha Priyadarshani, Julius Juodakis.

    Args:
    
        origin (PosixPath): folder with raw data to be segmented
        destination (PosixPath): Destination folder. /year/individual is added.
        subset (str, optional): Subset to save, e.g "GREAT-TIT" only. Defaults to None.
    """
    for root, dirs, files in os.walk(str(origin)):

        for wavfile in tqdm(files, desc="{Reading files}",
                            position=0, leave=True):

            if wavfile.endswith('.wav') or wavfile.endswith('.WAV') and wavfile + '.data' in files:
                
                wavfile = Path(root) / wavfile
                segment_bouts(wavfile, destination, subset=subset)

####################################

# 1 - Make function to split wavs to processed data folder
# (you need to create a directory in paths.py for this purpose)
# update: now can subset, ***needs better filenames AND platform-independent path creation

# 2 - get data from the .data file, add coordinates and other information
# and make a nice, tidy .jason file following avgn format

